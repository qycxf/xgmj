// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	player.proto

It has these top-level messages:
	SimpleRequest
	SimpleReply
	User
	ConsumeRequest
	TableRecordRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SimpleRequest struct {
	IntVal int32  `protobuf:"varint,1,opt,name=intVal" json:"intVal,omitempty"`
	StrVal string `protobuf:"bytes,2,opt,name=strVal" json:"strVal,omitempty"`
}

func (m *SimpleRequest) Reset()                    { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string            { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()               {}
func (*SimpleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SimpleRequest) GetIntVal() int32 {
	if m != nil {
		return m.IntVal
	}
	return 0
}

func (m *SimpleRequest) GetStrVal() string {
	if m != nil {
		return m.StrVal
	}
	return ""
}

type SimpleReply struct {
	IntVal int32  `protobuf:"varint,1,opt,name=intVal" json:"intVal,omitempty"`
	StrVal string `protobuf:"bytes,2,opt,name=strVal" json:"strVal,omitempty"`
}

func (m *SimpleReply) Reset()                    { *m = SimpleReply{} }
func (m *SimpleReply) String() string            { return proto.CompactTextString(m) }
func (*SimpleReply) ProtoMessage()               {}
func (*SimpleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SimpleReply) GetIntVal() int32 {
	if m != nil {
		return m.IntVal
	}
	return 0
}

func (m *SimpleReply) GetStrVal() string {
	if m != nil {
		return m.StrVal
	}
	return ""
}

type User struct {
	Uid      int32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Goods    string `protobuf:"bytes,3,opt,name=goods" json:"goods,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *User) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *User) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *User) GetGoods() string {
	if m != nil {
		return m.Goods
	}
	return ""
}

type ConsumeRequest struct {
	Uid      int32   `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	GoodType string  `protobuf:"bytes,2,opt,name=goodType" json:"goodType,omitempty"`
	Count    int32   `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Detail   string  `protobuf:"bytes,4,opt,name=detail" json:"detail,omitempty"`
	Uids     []int32 `protobuf:"varint,5,rep,packed,name=uids" json:"uids,omitempty"`
}

func (m *ConsumeRequest) Reset()                    { *m = ConsumeRequest{} }
func (m *ConsumeRequest) String() string            { return proto.CompactTextString(m) }
func (*ConsumeRequest) ProtoMessage()               {}
func (*ConsumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConsumeRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ConsumeRequest) GetGoodType() string {
	if m != nil {
		return m.GoodType
	}
	return ""
}

func (m *ConsumeRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ConsumeRequest) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *ConsumeRequest) GetUids() []int32 {
	if m != nil {
		return m.Uids
	}
	return nil
}

type TableRecordRequest struct {
	Appname string `protobuf:"bytes,1,opt,name=appname" json:"appname,omitempty"`
	Tableid int32  `protobuf:"varint,2,opt,name=tableid" json:"tableid,omitempty"`
	Inning  int32  `protobuf:"varint,3,opt,name=inning" json:"inning,omitempty"`
	Uids    string `protobuf:"bytes,4,opt,name=uids" json:"uids,omitempty"`
	Scores  string `protobuf:"bytes,5,opt,name=scores" json:"scores,omitempty"`
	Misc    string `protobuf:"bytes,6,opt,name=misc" json:"misc,omitempty"`
	Zdata   []byte `protobuf:"bytes,7,opt,name=zdata,proto3" json:"zdata,omitempty"`
}

func (m *TableRecordRequest) Reset()                    { *m = TableRecordRequest{} }
func (m *TableRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*TableRecordRequest) ProtoMessage()               {}
func (*TableRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TableRecordRequest) GetAppname() string {
	if m != nil {
		return m.Appname
	}
	return ""
}

func (m *TableRecordRequest) GetTableid() int32 {
	if m != nil {
		return m.Tableid
	}
	return 0
}

func (m *TableRecordRequest) GetInning() int32 {
	if m != nil {
		return m.Inning
	}
	return 0
}

func (m *TableRecordRequest) GetUids() string {
	if m != nil {
		return m.Uids
	}
	return ""
}

func (m *TableRecordRequest) GetScores() string {
	if m != nil {
		return m.Scores
	}
	return ""
}

func (m *TableRecordRequest) GetMisc() string {
	if m != nil {
		return m.Misc
	}
	return ""
}

func (m *TableRecordRequest) GetZdata() []byte {
	if m != nil {
		return m.Zdata
	}
	return nil
}

func init() {
	proto.RegisterType((*SimpleRequest)(nil), "pb.SimpleRequest")
	proto.RegisterType((*SimpleReply)(nil), "pb.SimpleReply")
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterType((*ConsumeRequest)(nil), "pb.ConsumeRequest")
	proto.RegisterType((*TableRecordRequest)(nil), "pb.TableRecordRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PlayerService service

type PlayerServiceClient interface {
	SayHello(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	CheckToken(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	UserInfo(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*User, error)
	AddTableRecord(ctx context.Context, in *TableRecordRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	ConsumeGoods(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	ConsumeGoodsLoss(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	MultiConsumeGoods(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	EarnGoods(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	ChargeCoin(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	WinLossCoin(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	MultiWinLossCoin(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	GetTableID(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	PutTableID(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error)
}

type playerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPlayerServiceClient(cc *grpc.ClientConn) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) SayHello(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) CheckToken(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/CheckToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) UserInfo(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/pb.PlayerService/UserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) AddTableRecord(ctx context.Context, in *TableRecordRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/AddTableRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) ConsumeGoods(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/ConsumeGoods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) ConsumeGoodsLoss(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/ConsumeGoodsLoss", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) MultiConsumeGoods(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/MultiConsumeGoods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) EarnGoods(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/EarnGoods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) ChargeCoin(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/ChargeCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) WinLossCoin(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/WinLossCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) MultiWinLossCoin(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/MultiWinLossCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetTableID(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/GetTableID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PutTableID(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/pb.PlayerService/PutTableID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlayerService service

type PlayerServiceServer interface {
	SayHello(context.Context, *SimpleRequest) (*SimpleReply, error)
	CheckToken(context.Context, *SimpleRequest) (*SimpleReply, error)
	UserInfo(context.Context, *SimpleRequest) (*User, error)
	AddTableRecord(context.Context, *TableRecordRequest) (*SimpleReply, error)
	ConsumeGoods(context.Context, *ConsumeRequest) (*SimpleReply, error)
	ConsumeGoodsLoss(context.Context, *SimpleRequest) (*SimpleReply, error)
	MultiConsumeGoods(context.Context, *ConsumeRequest) (*SimpleReply, error)
	EarnGoods(context.Context, *ConsumeRequest) (*SimpleReply, error)
	ChargeCoin(context.Context, *SimpleRequest) (*SimpleReply, error)
	WinLossCoin(context.Context, *SimpleRequest) (*SimpleReply, error)
	MultiWinLossCoin(context.Context, *SimpleRequest) (*SimpleReply, error)
	GetTableID(context.Context, *SimpleRequest) (*SimpleReply, error)
	PutTableID(context.Context, *SimpleRequest) (*SimpleReply, error)
}

func RegisterPlayerServiceServer(s *grpc.Server, srv PlayerServiceServer) {
	s.RegisterService(&_PlayerService_serviceDesc, srv)
}

func _PlayerService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).SayHello(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).CheckToken(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).UserInfo(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_AddTableRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).AddTableRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/AddTableRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).AddTableRecord(ctx, req.(*TableRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_ConsumeGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).ConsumeGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/ConsumeGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).ConsumeGoods(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_ConsumeGoodsLoss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).ConsumeGoodsLoss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/ConsumeGoodsLoss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).ConsumeGoodsLoss(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_MultiConsumeGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).MultiConsumeGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/MultiConsumeGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).MultiConsumeGoods(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_EarnGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).EarnGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/EarnGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).EarnGoods(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_ChargeCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).ChargeCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/ChargeCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).ChargeCoin(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_WinLossCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).WinLossCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/WinLossCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).WinLossCoin(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_MultiWinLossCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).MultiWinLossCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/MultiWinLossCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).MultiWinLossCoin(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetTableID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetTableID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/GetTableID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetTableID(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PutTableID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PutTableID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlayerService/PutTableID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PutTableID(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlayerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _PlayerService_SayHello_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _PlayerService_CheckToken_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _PlayerService_UserInfo_Handler,
		},
		{
			MethodName: "AddTableRecord",
			Handler:    _PlayerService_AddTableRecord_Handler,
		},
		{
			MethodName: "ConsumeGoods",
			Handler:    _PlayerService_ConsumeGoods_Handler,
		},
		{
			MethodName: "ConsumeGoodsLoss",
			Handler:    _PlayerService_ConsumeGoodsLoss_Handler,
		},
		{
			MethodName: "MultiConsumeGoods",
			Handler:    _PlayerService_MultiConsumeGoods_Handler,
		},
		{
			MethodName: "EarnGoods",
			Handler:    _PlayerService_EarnGoods_Handler,
		},
		{
			MethodName: "ChargeCoin",
			Handler:    _PlayerService_ChargeCoin_Handler,
		},
		{
			MethodName: "WinLossCoin",
			Handler:    _PlayerService_WinLossCoin_Handler,
		},
		{
			MethodName: "MultiWinLossCoin",
			Handler:    _PlayerService_MultiWinLossCoin_Handler,
		},
		{
			MethodName: "GetTableID",
			Handler:    _PlayerService_GetTableID_Handler,
		},
		{
			MethodName: "PutTableID",
			Handler:    _PlayerService_PutTableID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}

func init() { proto.RegisterFile("player.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xed, 0x36, 0xd9, 0x34, 0x9d, 0xa6, 0x25, 0xb5, 0x50, 0xb5, 0xea, 0x29, 0xda, 0x53, 0xb8,
	0x44, 0x28, 0x15, 0x52, 0x05, 0x42, 0x08, 0x05, 0x54, 0x8a, 0x40, 0xaa, 0x36, 0x01, 0xce, 0xce,
	0xae, 0x49, 0xad, 0x38, 0xb6, 0xb1, 0xbd, 0x48, 0xe1, 0xc4, 0x57, 0xf1, 0x0f, 0xfc, 0x15, 0x1a,
	0x7b, 0x37, 0x4a, 0x45, 0x0e, 0xd9, 0xde, 0xe6, 0x8d, 0xe7, 0xcd, 0xbc, 0x79, 0x3b, 0x5a, 0xe8,
	0x69, 0x41, 0xd7, 0xcc, 0x8c, 0xb4, 0x51, 0x4e, 0x91, 0x43, 0x3d, 0x4f, 0xdf, 0xc0, 0xe9, 0x94,
	0xaf, 0xb4, 0x60, 0x19, 0xfb, 0x51, 0x32, 0xeb, 0xc8, 0x05, 0x74, 0xb8, 0x74, 0x5f, 0xa9, 0x48,
	0xa2, 0x41, 0x34, 0x8c, 0xb3, 0x0a, 0x61, 0xde, 0x3a, 0x83, 0xf9, 0xc3, 0x41, 0x34, 0x3c, 0xce,
	0x2a, 0x94, 0xbe, 0x86, 0x93, 0xba, 0x81, 0x16, 0xeb, 0xc6, 0xf4, 0x8f, 0xd0, 0xfe, 0x62, 0x99,
	0x21, 0x7d, 0x68, 0x95, 0xbc, 0xa8, 0x48, 0x18, 0x92, 0x4b, 0xe8, 0x4a, 0x9e, 0x2f, 0x25, 0x5d,
	0xb1, 0x8a, 0xb3, 0xc1, 0xe4, 0x29, 0xc4, 0x0b, 0xa5, 0x0a, 0x9b, 0xb4, 0xfc, 0x43, 0x00, 0xe9,
	0xef, 0x08, 0xce, 0x26, 0x4a, 0xda, 0x72, 0xb5, 0xd9, 0x66, 0x67, 0x5b, 0xac, 0x9e, 0xad, 0xf5,
	0xa6, 0x6d, 0x8d, 0xb1, 0x6d, 0xae, 0x4a, 0xe9, 0x7c, 0xdb, 0x38, 0x0b, 0x00, 0xa5, 0x17, 0xcc,
	0x51, 0x2e, 0x92, 0x76, 0x90, 0x1e, 0x10, 0x21, 0xd0, 0x2e, 0x79, 0x61, 0x93, 0x78, 0xd0, 0x1a,
	0xc6, 0x99, 0x8f, 0xd3, 0x3f, 0x11, 0x90, 0x19, 0x9d, 0xa3, 0x1b, 0xb9, 0x32, 0x45, 0x2d, 0x23,
	0x81, 0x23, 0xaa, 0xb5, 0x5f, 0x25, 0xf2, 0x3d, 0x6a, 0x88, 0x2f, 0x0e, 0xeb, 0x79, 0xe1, 0xd5,
	0xc4, 0x59, 0x0d, 0x83, 0x93, 0x92, 0xcb, 0x45, 0xa5, 0xa6, 0x42, 0x9b, 0xb1, 0x41, 0x8c, 0x8f,
	0xbd, 0xbb, 0xb9, 0x32, 0x0c, 0xc5, 0x04, 0x77, 0x3d, 0xc2, 0xda, 0x15, 0xb7, 0x79, 0xd2, 0x09,
	0xb5, 0x18, 0xe3, 0x92, 0xbf, 0x0a, 0xea, 0x68, 0x72, 0x34, 0x88, 0x86, 0xbd, 0x2c, 0x80, 0xf1,
	0xdf, 0x18, 0x4e, 0xef, 0xfc, 0x71, 0x4c, 0x99, 0xf9, 0xc9, 0x73, 0x46, 0x9e, 0x43, 0x77, 0x4a,
	0xd7, 0x1f, 0x98, 0x10, 0x8a, 0x9c, 0x8f, 0xf4, 0x7c, 0xf4, 0xe0, 0x4e, 0x2e, 0x9f, 0x6c, 0xa7,
	0xb4, 0x58, 0xa7, 0x07, 0x64, 0x0c, 0x30, 0xb9, 0x67, 0xf9, 0x72, 0xa6, 0x96, 0x4c, 0xee, 0xc9,
	0x79, 0x06, 0x5d, 0xfc, 0xfe, 0xb7, 0xf2, 0xfb, 0xce, 0x29, 0x5d, 0x4c, 0x61, 0x41, 0x7a, 0x40,
	0x5e, 0xc1, 0xd9, 0xdb, 0xa2, 0xd8, 0x72, 0x97, 0x5c, 0xe0, 0xeb, 0xff, 0x76, 0xef, 0x9a, 0xf3,
	0x02, 0x7a, 0xd5, 0x69, 0xdc, 0xe0, 0xad, 0x10, 0x82, 0x25, 0x0f, 0x8f, 0x65, 0x17, 0xed, 0x1a,
	0xfa, 0xdb, 0xb4, 0x4f, 0xca, 0xda, 0x3d, 0x17, 0x7b, 0x09, 0xe7, 0x9f, 0x4b, 0xe1, 0xf8, 0x63,
	0xa6, 0x8e, 0xe1, 0xf8, 0x3d, 0x35, 0xb2, 0x21, 0x07, 0x26, 0xf7, 0xd4, 0x2c, 0xd8, 0x44, 0xf1,
	0x7d, 0xcd, 0xbf, 0x82, 0x93, 0x6f, 0x5c, 0xe2, 0x52, 0x0d, 0x48, 0xd7, 0xd0, 0xf7, 0x8b, 0x35,
	0x67, 0x8e, 0x01, 0x6e, 0x98, 0xf3, 0xdf, 0xeb, 0xf6, 0xdd, 0xfe, 0x9c, 0xbb, 0xb2, 0x19, 0x67,
	0xde, 0xf1, 0xbf, 0xb7, 0xab, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x94, 0x3d, 0xc8, 0xee,
	0x04, 0x00, 0x00,
}
